version: '3.8'
services:
  data-database:
      container_name: data-database
      image: postgres:alpine
      restart: unless-stopped
      healthcheck:
        test: pg_isready -U ${DB_SERVER_USER} -d ${DB_SERVER_DATABASE} -p ${DB_SERVER_PORT}
        interval: 5s
        retries: 5
        timeout: 5s
      environment:
        POSTGRES_DB: "${DB_SERVER_DATABASE}"
        POSTGRES_USER: "${DB_SERVER_USER}"
        POSTGRES_PASSWORD: "${DB_SERVER_PASSWORD}"
      command: -p ${DB_SERVER_PORT}
      volumes:
        - data-database-data:/var/lib/postgresql/data
      networks:
        - data-database-network
      expose:
        - "${DB_SERVER_PORT}"
      ports:
        - "${DB_SERVER_PORT}:${DB_SERVER_PORT}"
  data:
    container_name: data
    image: recupplast/api:latest
    restart: unless-stopped
    environment:
      DB_SERVER_HOST: "${DB_SERVER_HOST}"
      DB_SERVER_PORT: "${DB_SERVER_PORT}"
      DB_SERVER_DATABASE: "${DB_SERVER_DATABASE}"
      DB_SERVER_USER: "${DB_SERVER_USER}"
      DB_SERVER_PASSWORD: "${DB_SERVER_PASSWORD}"
      PORT: "${PORT}"
      RCP_AUTH_PROTOCOL: "${RCP_AUTH_PROTOCOL}"
      RCP_AUTH_URL: "${RCP_AUTH_URL}"
      RCP_AUTH_PORT: "${RCP_AUTH_PORT}"
      CORS_ORIGIN: "${CORS_ORIGIN}"
      MIGRATE: "${MIGRATE}"
      PREFIX: "${PREFIX}"
    networks:
      - data-database-network
      - portainer_proxy-network
    depends_on:
      data-database:
        condition: service_healthy
    expose:
      - "${PORT}"
    ports:
      - "${PORT}:${PORT}"
networks:
  data-database-network:
    driver: bridge
  portainer_proxy-network:
    external: true
volumes:
  data-database-data:
